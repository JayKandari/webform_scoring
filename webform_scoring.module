<?php

/**
 * Implements hook_help().
 */
function webform_scoring_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#webform_scoring':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds a hidden field to a webform to save overall score for a submission when Webform Scoring is enabled.') . '</p>';
      $output .= '<p>' . t('This module is particularly useful if you want to rate/score the submissions of users. For eg: you are using webforms to create a survey, and you want to get the list of potential users/clients/people you wish to interact with.') . '</p>';
      $output .= '<p>' . t('This module allows defining scores for a different type of inputs by the user. For eg: User is asked a question like "Which city they live in?" and based on user\'s answer we score them and so on.') . '</p>';
      $output .= '<p>' . t('Configure Scores per field for a webform by <br/> Goto Webform\'s view page > Webform Tab > Scoring Rules.') . '</p>';
      return $output;
  }
}

/**
 * Implement hook_menu
 * @return array
 */
function webform_scoring_menu() {
  $items = array();

  $items['node/%webform_menu/webform/scoring-rules'] = array(
    'title' => 'Scoring Rules',
    'page callback' => 'webform_scoring_scoring_rules',
    'page arguments' => array(1, 4, 5),
    'access callback' => 'webform_results_access',
    'access arguments' => array(1),
    'weight' => 6,
    'file' => 'includes/pages/rule.manage.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%webform_menu/webform-results/scores'] = array(
    'title' => 'Scores',
    'page callback' => 'webform_scoring_scores',
    'page arguments' => array(1),
    'access callback' => 'webform_results_access',
    'access arguments' => array(1),
    'weight' => 6,
    'file' => 'includes/pages/score.view.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Get the settings for the current webform
 * @param type $nid
 * @return type
 */
function _webform_score_enabled($nid) {
  $enabled = &drupal_static(__FUNCTION__ . '_' . $nid);

  if (empty($enabled['loaded'])) {
    $enabled['loaded'] = TRUE;
    $query = db_select('webform_scoring_enabled_webforms', 'a');
    $query->fields('a');
    $query->condition('a.nid', $nid);
    $enabled['result'] = $query->execute()->fetch();
  }

  return $enabled['result'];
}

/**
 * Calculate the score for the result of a submission
 * @param type $node
 * @param type $data
 * @return boolean|array
 */
function webform_scoring_calculate_score($node, $data) {
  $score_enabled = _webform_score_enabled($node->nid);
  // Scoring is not enabled for this node.
  // Note that this function returns a boolean. Thus return FALSE.
  if ($score_enabled == NULL)
    return FALSE;
  if ($score_enabled->enabled && _webform_score_has_cid($node, $score_enabled->cid)) {
    $query = db_select('webform_scoring_values_scores_pair', 'a');
    $query->fields('a');
    $query->condition('a.nid', $node->webform['nid'], '=');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

    $score_key = array();
    $cid_list = array();
    //$component = array();
    foreach ($result as $item) {
      $pairs = array();
      $score_key[$item['cid']]['cid'] = $item['cid'];
      array_push($cid_list, $item['cid']);
      $lines = explode("\n", trim($item['value_score_pair']));
      foreach ($lines as $com_val) {
        $pair = array();
        $com_val = explode("|", $com_val);
        $pair['value'] = $com_val[0];
        $pair['score'] = $com_val[1];
        array_push($pairs, $pair);
      }
      $score_key[$item['cid']]['pairs'] = $pairs;
    }
    $total_score = 0;
    foreach ($data as $key => $value) {
      if (!is_array($value)) {
        $value = array($value);
      }
      if (in_array($key, $cid_list)) {
        foreach ($score_key[$key]['pairs'] as $vs_pair) {
          if ($value[0] == $vs_pair['value']) {
            $total_score += $vs_pair['score'];
          }
        }
      }
    }
    return $total_score;
  }

  return FALSE;
}

/**
 * Store a quiz result upon submission presave
 * @param type $node
 * @param type $submission
 */
function webform_scoring_webform_submission_presave($node, &$submission) {
  $total_score = webform_scoring_calculate_score($node, $submission->data);

  if ($total_score !== FALSE) {
    $score_enabled = _webform_score_enabled($node->nid);
    // Scoring is not enabled for this node.
    if($score_enabled != NULL) {
       $submission->data[$score_enabled->cid][0] = $total_score;
    }
  }
}

/**
 * Check if the webform contains a certain component
 * @param type $node
 * @param type $cid
 * @return type
 */
function _webform_score_has_cid($node, $cid) {
  if (empty($node->webform)) {
    return FALSE;
  }

  if (empty($node->webform['components'][$cid]['name'])) {
    return FALSE;
  }

  return $node->webform['components'][$cid]['name'];
}
